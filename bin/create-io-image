#!/usr/bin/python3

import glob
import os
import re
import shutil
import subprocess
import sys
import tempfile
import vmu

from typing import Dict

def run_command(command, shell=False):
    # Preprocess command
    if shell:
        if not isinstance(command, str):
            command = ' '.join(command)
    elif not (isinstance(command, list) or isinstance(command, tuple)):
        raise TypeError('Need list or tuple, got %s' % (repr(command)))

    # Run and return command
    p = subprocess.Popen(command, encoding='utf-8', stdout=subprocess.PIPE,
                         stderr=subprocess.PIPE, shell=shell)
    (stdout, stderr) = p.communicate()
    return (p.returncode, stdout, stderr)


def make_source_tarball_from_github(package, repo='opensciencegrid', branch='master'):
    """
    Generate a tarball containing the bare github clone of 'package' using the
    'branch' from 'repo'.

    package: name of the package on github
    repo: source github repository
    branch: source branch or tag
    """
    source_dir_name = package + '-git'
    source_tarball_base = f"{source_dir_name}.{repo}.{branch.replace('/', '_')}"
    temp_tarball_name = f"{source_tarball_base}.{os.getpid()}.tar.gz"
    source_tarball_name = f"{source_tarball_base}.tar.gz"
    # Return immediately if the source tarball seems to exist and is undamaged
    if os.path.exists(source_tarball_name) and run_command("tar tzf %r >/dev/null", shell=True)[0] == 0:
        return source_tarball_name

    # Clone the repo into a temporary directory
    temp_directory = tempfile.mkdtemp()
    clone_directory = os.path.join(temp_directory, source_dir_name + '.git')
    command = ('git', 'clone', '--bare', 'https://github.com/%s/%s' % (repo, package), clone_directory)
    (exit_status, stdout, stderr) = run_command(command)
    if exit_status != 0:
        print('git clone failed with exit status {exit_status}')
        print(stdout)
        print(stderr)
        sys.exit(1)

    # Make source tarball from the specified branch
    print('Making "%s" from "%s"' % (source_tarball_name, clone_directory))
    command = ('git', '--git-dir=' + clone_directory,
               'archive', '--prefix=' + source_dir_name + '/', '--output=' + temp_tarball_name,
               branch)
    (exit_status, stdout, stderr) = run_command(command)
    if exit_status != 0:
        print(f'git archive failed with exit status {exit_status}')
        print(stdout)
        print(stderr)
        sys.exit(1)
    try:
        shutil.move(temp_tarball_name, source_tarball_name)
    except FileExistsError:
        # Another instance beat us to the punch; hope they'll get it right.
        os.unlink(temp_tarball_name)
        pass
    except OSError as err:
        print(f"Moving {source_tarball_name} failed with error {err}")
        os.unlink(temp_tarball_name)
        sys.exit(1)

    # Clean up
    shutil.rmtree(temp_directory)

    return source_tarball_name


def create_image(config_filename):
    with open(config_filename, 'r') as f:
        config_contents = f.read()

    serial_number = re.search(r'(\d+)', config_filename).group(1)
    image_filename = 'input-image-%s.qcow2' % (serial_number)

    if config_contents in contents_to_filename.keys():
        print(f'Linking from "{contents_to_filename[config_contents]}" -> "{image_filename}"')
        os.link(contents_to_filename[config_contents], image_filename)

    else:
        image_directory = tempfile.mkdtemp()

        shutil.copy(os.path.join(vmu.RUN_DIR, 'bin/run-job'), image_directory)

        input_directory = os.path.join(image_directory, 'input')
        os.mkdir(input_directory)
        shutil.copy(os.path.join(vmu.RUN_DIR, 'osg-test.patch'), input_directory)
        shutil.copy(os.path.join(vmu.RUN_DIR, 'test-changes.patch'), input_directory)
        shutil.copy(os.path.join(vmu.RUN_DIR, 'osg-release.patch'), input_directory)
        shutil.copy(config_filename, os.path.join(input_directory, 'osg-test.conf'))
        for rpm in glob.glob(os.path.join(vmu.RUN_DIR, 'osg-test-*.rpm')):
            shutil.copy(rpm, input_directory)

        tarballs = []
        try:
            # Clone osg-test from source
            repo, branch = re.search(r'testsource = (.*):(.*)', config_contents).groups()
            tarballs.append((make_source_tarball_from_github('osg-test', repo, branch),
                             'osg-test-git.tar.gz'))
            tarballs.append((make_source_tarball_from_github('osg-ca-generator'),
                             'osg-ca-generator-git.tar.gz'))
        except AttributeError:
            # user did not request osg-test from source i.e. install from yum repos instead
            pass
        for src, dest in tarballs:
            shutil.copy(src, f'{input_directory}/{dest}')

        os.mkdir(os.path.join(image_directory, 'output'))

        os.environ["LIBGUESTFS_DEBUG"] = "1"
        os.environ["LIBGUESTFS_TRACE"] = "1"
        print(f'Making "{image_filename}" from "{image_directory}"')
        return_code, stdout, stderr = run_command(['virt-make-fs', '--size=10M', '--format=qcow2',
                                                   image_directory, image_filename])

        shutil.rmtree(image_directory)
        print(stdout)
        if stderr:
            print(stderr, file=sys.stderr)

        if return_code:
            vmu.die(stderr)

        contents_to_filename[config_contents] = image_filename

# ------------------------------------------------------------------------------

if __name__ == '__main__':

    # Define paths
    script_name = os.path.basename(sys.argv[0])

    # Process command-line arguments
    if len(sys.argv) != 2:
        vmu.die('usage: %s <TEST CONFIG FILE>' % (script_name))

    config_filename = sys.argv[1]

    # Write files
    contents_to_filename: Dict[str, str] = {}
    create_image(config_filename)
    os.remove(config_filename)
