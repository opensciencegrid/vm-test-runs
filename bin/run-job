#!/bin/sh

MOUNT_DIR=/mnt/user
INPUT_DIR=$MOUNT_DIR/input
OUTPUT_DIR=$MOUNT_DIR/output
SYSTEM_LOG_DIR=$OUTPUT_DIR/system-files

log_command()
{
    echo '----------------------------------------------------------------------'
    echo `date '+%Y-%m-%d %T'`: "$@"
    "$@"
    exit_status=$?
    if [ $exit_status -ne 0 ]; then
        echo "==> FAILED with exit status $exit_status"
    else
        echo '==> OK'
    fi
    echo
    return $exit_status
}

# Runs command up to given number of tries with exponential backoff.  Maximum
# possible sleep time is ((2 ** ($1 - 1)) - 1) seconds.
run_command_with_retries()
{
    try_count=$1
    shift

    log_command "$@" && return 0

    sleep_time=1
    while [ $try_count -gt 1 ]; do
        log_command sleep $sleep_time
        sleep_time=`expr $sleep_time '*' 2`
        try_count=`expr $try_count - 1`
        log_command "$@" && return 0
    done

    return 1
}

# Figure out OSG release series
osg_series=`grep series $INPUT_DIR/osg-test.conf | sed -e 's/series *= *//'`

# Set variables based on OS major version
os_major_version=`sed -e 's/^[^0-9]*//' -e 's/\..*$//' /etc/redhat-release`
epel_url="https://dl.fedoraproject.org/pub/epel/epel-release-latest-$os_major_version.noarch.rpm"
case $os_major_version in
    5 )
        osg_url="https://repo.opensciencegrid.org/osg/$osg_series/osg-$osg_series-el5-release-latest.rpm"
        priorities_rpm='yum-priorities'
        python_lib_dir='/usr/lib/python2.4'
        ;;
    6 )
        osg_url="https://repo.opensciencegrid.org/osg/$osg_series/osg-$osg_series-el6-release-latest.rpm"
        priorities_rpm='yum-plugin-priorities'
        python_lib_dir='/usr/lib/python2.6'
        python='/usr/bin/python2'
        ;;
    7 )
        osg_url="https://repo.opensciencegrid.org/osg/$osg_series/osg-$osg_series-el7-release-latest.rpm"
        priorities_rpm='yum-plugin-priorities'
        python_lib_dir='/usr/lib/python2.7'
        python='/usr/bin/python2'
        ;;
    8 )
        osg_url="https://repo.opensciencegrid.org/osg/$osg_series/osg-$osg_series-el8-release-latest.rpm"
        priorities_rpm=
        python_lib_dir='/usr/lib/python3.6'
        python='/usr/libexec/platform-python'
        ;;
    * )
        echo "Could not determine OS major version from '$os_major_version'"
        exit 2
        ;;
esac

# Debugging (here, in case of early exit)
log_command date
log_command cat /etc/creation_date
log_command cat /etc/redhat-release
log_command echo $os_major_version
log_command ip addr show
log_command printenv
log_command mount
log_command cat /proc/net/dev

# Set a hostname
if [[ -n `ip addr | grep eth0` ]]; then
    ip_address=`ip addr show eth0 | awk 'match($0, /inet ([0-9.]+)/, a) { print a[1] }'`
elif [[ -n `ip addr | grep ens3` ]]; then
    ip_address=`ip addr show ens3 | awk 'match($0, /inet ([0-9.]+)/, a) { print a[1] }'`
else
    echo 'Could not find IP address'
    exit 1
fi
echo "$ip_address osg-test.localdomain osg-test" >> /etc/hosts
log_command cat /etc/hosts
log_command cat /etc/host.conf
log_command hostname
log_command hostname osg-test.localdomain
log_command hostname

# Do initial check of gethostbyname()
# log_command yum -y install strace
# log_command strace -s 8192 -v $INPUT_DIR/check-hostname osg-test.localdomain

# Install repositories
# See, e.g., http://opensciencegrid.github.io/docs/common/yum/

# TODO: Drop the following 3.3-ism when we get rid of 3.3 upgrade tests in the params
# EPEL6 contains python-condor, which obsoletes condor-python and breaks OSG 3.3 installations
[ "$osg_series" == "3.3" ] && log_command sed -i 's/\[epel\]/\[epel\]\nexclude=python-condor/' \
                                          /etc/yum.repos.d/epel.repo
rpm -q epel-release || run_command_with_retries 8 rpm --upgrade $epel_url
if [ $? -ne 0 ]; then
    log_command echo 'Could not install EPEL repository'
    exit 1
fi

# make sure we have the latest OS/EPEL packages so osg-test doesn't update
# _those_
run_command_with_retries 8 yum -y distro-sync

if [ "$os_major_version" -lt 8 ]; then
    run_command_with_retries 8 yum -y install $priorities_rpm
    log_command sed -i -e 's/^plugins=.*$/plugins=1/' /etc/yum.conf
else
    log_command echo 'EL 8: no priorities plugin'
fi
rpm -q osg-release || run_command_with_retries 8 rpm --upgrade $osg_url
if [ $? -ne 0 ]; then
    log_command echo 'Could not install OSG repository'
    exit 1
fi

# safety net
if ! [ -e /usr/bin/python ]; then
    if [ -e /usr/bin/python3 ]; then
        ln -s python3 /usr/bin/python
    elif [ -e /usr/libexec/platform-python ]; then
        ln -s /usr/libexec/platform-python /usr/bin/python
    fi
fi

# Install osg-test and osg-ca-generator
if [ -f $INPUT_DIR/osg-test-git.tar.gz ]; then
    if [ "$os_major_version" -lt 8 ]; then
        run_command_with_retries 8 yum -y install git
    else
        run_command_with_retries 8 yum -y install git-core
    fi

    for PACKAGE in 'osg-test' 'osg-ca-generator'; do
        tarball=$INPUT_DIR/$PACKAGE-git.tar.gz
        tar xzf $tarball --directory /tmp
        cd /tmp/$PACKAGE-git
        if [ "$os_major_version" -gt 7 ]; then
            find . -type f -exec sed -ri '1s,^#!/usr/bin/env python,#!'"$python"',' '{}' +
        fi
        make install DESTDIR=/ PYTHON="$python"
        log_command printf "%s source: git (%s)\n"  $PACKAGE  $(zcat $tarball | git get-tar-commit-id | cut -c 1-7)
    done
else
    RPM_LOCATION=`ls -1 $INPUT_DIR/osg-test-*.el$os_major_version.noarch.rpm 2>/dev/null | tail -n 1`
    if [ "x$RPM_LOCATION" != 'x' ]; then
        log_command rpm --install $RPM_LOCATION
        log_command rpm --verify osg-test
        rpm_version=`rpm --query osg-test`
        log_command echo "osg-test source: file $rpm_version" # For post-run analysis
    else
        run_command_with_retries 8 yum -y --enablerepo=osg-minefield install osg-test --disablerepo=osg
        if [ $? -ne 0 ]; then
            echo 'Could not install osg-test'
            exit 1
        fi
        for PACKAGE in 'osg-test' 'osg-ca-generator'; do
            log_command rpm --verify $PACKAGE
            rpm_version=`rpm --query $PACKAGE`
            log_command echo "$PACKAGE source: yum $rpm_version" # For post-run analysis
        done
    fi
fi

# Patch osg-test
log_command yum -y install patch --disablerepo=osg
log_command patch --directory=/usr/sbin --input=$INPUT_DIR/osg-test.patch --strip=1
log_command patch --directory=$python_lib_dir/site-packages --input=$INPUT_DIR/test-changes.patch --strip=1
if head -1 $INPUT_DIR/osg-release.patch | grep -qE '^From [0-9a-f]{40} '; then
    # git made this patch, so strip off the 'a/' and 'b/' from the filenames
    strip=1
else
    strip=0
fi
log_command patch --directory=/etc/yum.repos.d --input=$INPUT_DIR/osg-release.patch --strip=$strip

# Debug RHEL
grep 'Red Hat' /etc/redhat-release > /dev/null 2>&1
if [ $? -eq 0 ]; then
    log_command subscription-manager list
    log_command subscription-manager status
fi

# Run osg-test
rpm --query --all > $OUTPUT_DIR/rpm-qa-start.log 2>&1
osg-test --config=$MOUNT_DIR/input/osg-test.conf > $OUTPUT_DIR/osg-test-`date '+%Y%m%d'`.log 2>&1
rpm --query --all > $OUTPUT_DIR/rpm-qa-final.log 2>&1

# Debugging
log_command df -h
log_command ls -lF /etc/sysconfig
log_command ls -lF /etc/sysconfig/network-scripts
log_command hostname
log_command hostname --fqdn
# log_command strace -s 8192 -v $INPUT_DIR/check-hostname osg-test.localdomain
command -v ifconfig >/dev/null 2>&1 && \
    log_command ifconfig -a
command -v ip >/dev/null 2>&1 && \
    log_command ip addr show
log_command rpm --query openssl
log_command openssl version
log_command ls -lF /tmp
log_command find /tmp/cvmfs -ls
log_command find /etc/udev/rules.d -ls
log_command find /var/log -ls
log_command tar -czvf /var/log.tar.gz /var/log

# System files
if [ ! -e $SYSTEM_LOG_DIR ]; then
    mkdir $SYSTEM_LOG_DIR
fi
cp -r \
    /etc/host.conf \
    /etc/hosts \
    /etc/nsswitch.conf \
    /etc/resolv.conf \
    /etc/selinux/config \
    /etc/sysconfig/network-scripts/ifcfg-* \
    /etc/udev/rules.d/70-persistent-net.rules \
    /etc/yum.repos.d \
    /var/log.tar.gz \
    $SYSTEM_LOG_DIR/
